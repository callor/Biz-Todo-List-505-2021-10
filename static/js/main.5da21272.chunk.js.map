{"version":3,"sources":["logo.svg","context/AppContextProvider.jsx","context/UserContextProvider.jsx","comps/Todo/TodoMain.jsx","comps/Todo/TodoList.jsx","comps/Todo/TodoInput.jsx","comps/Todo/TodoItem.jsx","modules/fetchModule.js","comps/LoginForm.jsx","comps/LoginRoute.jsx","comps/AuthRoute.jsx","comps/Buttons/CompButton.jsx","comps/Buttons/HomeButton.jsx","comps/Buttons/MyButton.jsx","comps/Buttons/GoogleButton.jsx","App.js","reportWebVitals.js","index.js"],"names":["AppContext","createContext","useTodoContext","useContext","AppContextProvider","children","useState","t_id","t_text","t_comp","todo","setTodo","todoList","setTodoList","nextId","useRef","inputId","todoInsert","window","alert","current","focus","console","log","todoClear","propsStrore","onChange","e","target","value","onClick","onKeyPress","key","onDeleteClick","confirm","Number","dataset","todoId","_todoList","filter","onCompClick","index","findIndex","selectTodo","Provider","UserContext","useUserContext","UserContextProvider","propsData","user","setUser","TodoMain","header","form","className","TodoList","listView","map","item","TodoInput","ref","TodoItem","data-todo-id","fetchOption","method","headers","credentials","fetchLogin","userid","password","a","body","JSON","stringify","fetch","response","ok","json","resultUser","LoginForm","account","setAccount","history","useHistory","onChage","name","onLogin","replace","placeholder","type","LoginRoute","AuthRoute","fetchCallback","useCallback","gapi","auth2","init","client_id","scope","getAuthInstance","currentUser","get","googleUser","getBasicProfile","profile","getEmail","getName","image","getImageUrl","Token","getAuthResponse","id_token","useEffect","CompButton","style","backgroundColor","color","HomeButton","MyButton","GoogleButton","buttonRef","googleResponse","result","email","getId","login_source","googleSDK_init","load","isSignedIn","attachClickHandler","err","id","disconnect","App","src","logo","alt","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5da21272.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { createContext, useContext, useRef, useState } from \"react\";\r\n\r\n/**\r\n * React Context API 기능을 활용하여\r\n * state를 관리하는 도구\r\n *\r\n * 다중 구조의 컴포넌트가 겹쳐있는 경우\r\n * state 를 전파하는 것이 매우 불편한 코드로 작성될 수 있다\r\n *\r\n * 이럴 Context API를 활용하여\r\n * state와 공용으로 사용할 여러가지 함수를 Store에 보관하고\r\n * 필요한곳에서만 useContext()를 사용하여 쉽게 getter할수 있도록\r\n * 도와주는 컴포넌트\r\n *\r\n * Context를 생성하기\r\n * 생성된 Context에 state 등을 보관하고\r\n * useContext() Hook을 커스터마이징하여 손쉽게 사용할수 있도록 하는\r\n *\r\n * Context를 사용할 컴포넌트들을 합성 패턴을 이용하여 관리할수 있도록\r\n * 한다.\r\n */\r\n\r\n// 컨텍스트 생성\r\nconst AppContext = createContext();\r\n\r\n// 컨텍스트의 Store에 보관된 정보들 추출하기 위한 Hook 함수를 선언\r\nexport const useTodoContext = () => useContext(AppContext);\r\n\r\n// Provier를 합성패턴으로 선언하여\r\n// 필요한 곳에서 끌어올려 사용할수 있도록 한다\r\nfunction AppContextProvider({ children }) {\r\n  // TODO 정보 1개를 보관할 state\r\n  const [todo, setTodo] = useState({\r\n    t_id: 0,\r\n    t_text: \"리액트 복습\",\r\n    t_comp: false,\r\n  });\r\n\r\n  const [todoList, setTodoList] = useState([]);\r\n\r\n  // Referrence 변수선언하기\r\n\r\n  const nextId = useRef(0);\r\n  const inputId = useRef();\r\n\r\n  const onChange = (e) => {\r\n    const t_text = e.target.value;\r\n    // ES6 이후에는 객체에 값을 담을때\r\n    // 객체의 키이름과 같은 변수에 담긴 값을 담을때는\r\n    // 키이름 한번만 사용해도 된다\r\n    // {t_text : t_text} 는 {t_text} 처럼 사용해도 된다\r\n    setTodo({ ...todo, t_text, t_id: nextId.current });\r\n  };\r\n\r\n  // 리스트에 추가하기\r\n  const todoInsert = () => {\r\n    if (todo.t_text === \"\") {\r\n      window.alert(\"할일을 입력하세요 ~~~\");\r\n      inputId.current.focus();\r\n      return;\r\n    }\r\n    setTodoList([...todoList, todo]);\r\n    nextId.current++;\r\n    console.log(nextId.current);\r\n    todoClear();\r\n  };\r\n\r\n  // 입력창 clear\r\n  const todoClear = () => {\r\n    setTodo({ t_id: nextId.current, t_text: \"\", t_comp: false });\r\n  };\r\n\r\n  // 입력된 todo를 todoList에 추가하기\r\n  const onClick = () => todoInsert();\r\n\r\n  // 입력박스에서 Enter 키가 눌려지면\r\n  const onKeyPress = (e) => {\r\n    // e.keyCode === 13\r\n    console.log(e.key);\r\n    if (e.key === \"Enter\") {\r\n      todoInsert();\r\n    } else if (e.key === \"Escape\") {\r\n      todoClear();\r\n    }\r\n  };\r\n\r\n  const onDeleteClick = (e) => {\r\n    if (window.confirm(\"삭제할까요?\")) {\r\n      // data-todo-id 라고 저장하면 앞에 data-는 dataset으로 변경\r\n      // todo-id 는 lower Camel case로 변경되어 todoId 변수에서\r\n      //\t\tgetter 한다\r\n      const t_id = Number(e.target.dataset.todoId);\r\n      alert(t_id);\r\n      // 배열요소중에서 t_id 일치하는 요소를 삭제하기\r\n      // 원래 배열요소를 filtering하는데..\r\n      // t_id값이 dataset의 todoId와 일치하지 않는 것만\r\n      // 새로운 배열로 만들어라\r\n      const _todoList = todoList.filter((todo) => todo.t_id !== t_id);\r\n      setTodoList(_todoList);\r\n\r\n      // alert(\"삭제됨\");\r\n    }\r\n  };\r\n\r\n  const onCompClick = (e) => {\r\n    const t_id = Number(e.target.dataset.todoId);\r\n\r\n    // 배열요소중에 조건에 맞는 값이 있으면 그 값이 몇번째\r\n    // 요소인지 index를 return 한다\r\n    const index = todoList.findIndex((todo) => todo.t_id === t_id);\r\n    // 찾았으면 ~~~\r\n    // 해당 요소만 따로 추출하여 selectTodo에 담기\r\n    const selectTodo = todoList[index];\r\n\r\n    const _todoList = [...todoList];\r\n    _todoList[index] = {\r\n      ...selectTodo,\r\n      t_comp: !selectTodo.t_comp,\r\n    };\r\n    setTodoList(_todoList);\r\n  };\r\n\r\n  const propsStrore = {\r\n    todo,\r\n    todoList,\r\n    inputId,\r\n    onChange,\r\n    onClick,\r\n    onKeyPress,\r\n    onDeleteClick,\r\n    onCompClick,\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={propsStrore}>{children}</AppContext.Provider>\r\n  );\r\n}\r\n\r\nexport default AppContextProvider;\r\n","import { createContext, useContext, useState } from \"react\";\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const useUserContext = () => useContext(UserContext);\r\n\r\nfunction UserContextProvider({ children }) {\r\n  const [user, setUser] = useState();\r\n\r\n  const propsData = { user, setUser };\r\n\r\n  return (\r\n    <UserContext.Provider value={propsData}>{children}</UserContext.Provider>\r\n  );\r\n}\r\n\r\nexport default UserContextProvider;\r\n","import \"../../css/TodoMain.css\";\r\nimport { AppContextProvider } from \"../../context\";\r\n\r\nfunction TodoMain({ header, form, children }) {\r\n  return (\r\n    <AppContextProvider>\r\n      <main className=\"todo_main_layout\">\r\n        <div className=\"title\">{header}</div>\r\n        <section className=\"form_wrapper\">{form}</section>\r\n        <section className=\"list_wrapper\">{children}</section>\r\n      </main>\r\n    </AppContextProvider>\r\n  );\r\n}\r\n\r\nexport default TodoMain;\r\n","import { TodoItem } from \"../index\";\r\nimport { useTodoContext } from \"../../context\";\r\n\r\nfunction TodoList() {\r\n  const { todoList } = useTodoContext();\r\n\r\n  const listView = todoList.map((item) => {\r\n    return <TodoItem todo={item} key={item.t_id} />;\r\n  });\r\n\r\n  return <div>{listView}</div>;\r\n}\r\n\r\nexport default TodoList;\r\n","import \"../../css/TodoInput.css\";\r\nimport { useTodoContext } from \"../../context\";\r\n\r\nfunction TodoInput() {\r\n  const { inputId, todo, onChange, onClick, onKeyPress } = useTodoContext();\r\n  return (\r\n    <div className=\"form\">\r\n      <input\r\n        ref={inputId}\r\n        onChange={onChange}\r\n        value={todo.t_text}\r\n        onKeyPress={onKeyPress}\r\n      />\r\n      <div className=\"btn_insert\" onClick={onClick}>\r\n        추가\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoInput;\r\n","import \"../../css/TodoItem.css\";\r\nimport { useTodoContext } from \"../../context\";\r\n\r\nfunction TodoItem({ todo }) {\r\n  const { t_id, t_text, t_comp } = todo;\r\n  const { onDeleteClick, onCompClick } = useTodoContext();\r\n  return (\r\n    <div className=\"todo_item\">\r\n      <div className=\"todo_delete\" onClick={onDeleteClick} data-todo-id={t_id}>\r\n        &times;\r\n      </div>\r\n      <div\r\n        className={`todo_text ${t_comp && \"checked\"}  `}\r\n        onClick={onCompClick}\r\n        data-todo-id={t_id}\r\n      >\r\n        {t_text}\r\n      </div>\r\n      {/* 현재 todo의 t_comp 값이 true 일때만 이 tag 가 나타나도록 하라  */}\r\n      {t_comp && <div className=\"check_mark\">&#x2713;</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","const fetchOption = {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\r\n  },\r\n  credentials: \"include\",\r\n};\r\n\r\nconst fetchLogin = async (userid, password) => {\r\n  // 이미 선언된 fetchOption에 body 속성을 추가하기\r\n  fetchOption.body = JSON.stringify({ userid, password });\r\n\r\n  const response = await fetch(\r\n    \"http://localhost:8080/users/login\",\r\n    fetchOption\r\n  );\r\n\r\n  if (response.ok) {\r\n    const resultUser = await response.json();\r\n    return resultUser;\r\n  }\r\n};\r\n\r\nconst fetchUser = async () => {\r\n  const response = await fetch(\"http://localhost:8080/users\", fetchOption);\r\n  if (response.ok) {\r\n    const resultUser = response.json();\r\n    return resultUser;\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport { fetchLogin, fetchUser };\r\n","import \"../css/LoginForm.css\";\r\nimport { useState } from \"react\";\r\nimport { useUserContext } from \"../context\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { fetchLogin } from \"../modules/fetchModule\";\r\nimport { GoogleButton } from \"../comps\";\r\nfunction LoginForm() {\r\n  const { setUser } = useUserContext();\r\n  const [account, setAccount] = useState({\r\n    userid: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const history = useHistory();\r\n\r\n  const onChage = (e) => {\r\n    setAccount({ ...account, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const onLogin = async (e) => {\r\n    const { userid, password } = account;\r\n    const resultUser = await fetchLogin(userid, password);\r\n    await setUser(resultUser);\r\n    history.replace(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"login_form\">\r\n      <input\r\n        name=\"userid\"\r\n        placeholder=\"아이디를 입력하세요\"\r\n        onChange={onChage}\r\n      />\r\n      <input\r\n        name=\"password\"\r\n        type=\"password\"\r\n        placeholder=\"비빌번호를 입력하세요\"\r\n        onChange={onChage}\r\n      />\r\n      <button onClick={onLogin}>로그인</button>\r\n      <GoogleButton />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginForm;\r\n","import { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst LoginRoute = ({ children }) => {\r\n  return <BrowserRouter>{children}</BrowserRouter>;\r\n};\r\n\r\nexport default LoginRoute;\r\n","import { useUserContext } from \"../context\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useEffect, useCallback } from \"react\";\r\nimport { fetchUser } from \"../modules/fetchModule\";\r\n\r\nfunction AuthRoute({ children }) {\r\n  const { user, setUser } = useUserContext();\r\n  const history = useHistory();\r\n\r\n  const fetchCallback = useCallback(async () => {\r\n    if (!window.gapi) {\r\n      alert(\"google API Not Found!!!\");\r\n      history.replace(\"/login\");\r\n    }\r\n\r\n    await window.gapi.auth2.init({\r\n      client_id:\r\n        \"71709386283-j70dgf0es5rsao99d5ouhk03jot8fihg.apps.googleusercontent.com\",\r\n      scope: \"profile email\",\r\n    });\r\n\r\n    // gapi(goole API)로 부터 auth2 객체를 조회하기\r\n    const auth2 = await window?.gapi?.auth2.getAuthInstance();\r\n    if (!auth2) {\r\n      history.replace(\"/login\");\r\n    }\r\n\r\n    // 로그인되어있는 사용자 정보 getter\r\n    const googleUser = await auth2.currentUser.get();\r\n    const profile = await googleUser?.getBasicProfile();\r\n\r\n    if (!profile) {\r\n      history.replace(\"/login\");\r\n    }\r\n    const user = {\r\n      userid: profile.getEmail(),\r\n      name: profile.getName(),\r\n      image: profile.getImageUrl(),\r\n      Token: googleUser.getAuthResponse().id_token,\r\n    };\r\n\r\n    setUser(user);\r\n  }, [history, setUser]);\r\n  useEffect(fetchCallback, [fetchCallback]);\r\n\r\n  return <>{children}</>;\r\n}\r\n\r\nexport default AuthRoute;\r\n","import React from \"react\";\r\n\r\nfunction CompButton({ children, onClick, onKeyPress }) {\r\n  const btnStyle = {\r\n    backgroundColor: \"blue\",\r\n    color: \"white\",\r\n  };\r\n  return (\r\n    <button style={btnStyle} onClick={onClick} onKeyPress={onKeyPress}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default CompButton;\r\n","import React from \"react\";\r\n\r\nfunction HomeButton() {\r\n  const btnStyle = {\r\n    backgroundColor: \"blue\",\r\n    color: \"white\",\r\n  };\r\n  return <button style={btnStyle}>홈으로</button>;\r\n}\r\n\r\nexport default HomeButton;\r\n","import React from \"react\";\r\n\r\nfunction MyButton() {\r\n  const btnStyle = {\r\n    backgroundColor: \"blue\",\r\n    color: \"white\",\r\n  };\r\n  return <button style={btnStyle}>바로가기</button>;\r\n}\r\n\r\nexport default MyButton;\r\n","import \"../../css/GoogleButton.css\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { useUserContext } from \"../../context\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction GoogleButton() {\r\n  const buttonRef = useRef();\r\n  const { setUser } = useUserContext();\r\n  const history = useHistory();\r\n\r\n  const googleResponse = (result) => {\r\n    const profile = result.getBasicProfile();\r\n    const email = profile.getEmail();\r\n    const id = profile.getId();\r\n    const name = profile.getName();\r\n    const image = profile.getImageUrl();\r\n    const Token = result.getAuthResponse().id_token;\r\n\r\n    setUser({\r\n      userid: email,\r\n      login_source: \"GOOGLE\",\r\n    });\r\n    alert(email + \" 님 반갑습니다\");\r\n    history.replace(\"/\");\r\n  };\r\n\r\n  /**\r\n   * public/index.html 파일에 script를 import 한다\r\n   * src=\"https://apis.google.com/js/api:client.js\"\r\n   */\r\n  const googleSDK_init = () => {\r\n    if (!window.gapi) {\r\n      alert(\"Google API NOT Found\");\r\n      return;\r\n    }\r\n\r\n    // google API 가 활성화되고\r\n    // 활성화된 API중에서 auth2가 loading(사용할 준비가 되면)\r\n    // gapi : google cloud service를 JS에서 사용하기 위한 객체 도구\r\n    // gapi의 load() 함수를 사용하여 auth2 객체를 초기화하기\r\n    // 이때 google로 부터 부여받은 client_id를 입력한다.\r\n\r\n    window.gapi.load(\"auth2\", async () => {\r\n      // load() 함수에 의해서 auth2객체가 초기화 된다\r\n      // auth2 객체 : google cloud service를 사용한 oAuth2 인증 시스템에\r\n      // 접근 할수 있는 객체\r\n      // google로 로그인을 구현하기 위한 초기화 절차\r\n      const auth2 = await window.gapi.auth2.init({\r\n        client_id:\r\n          \"71709386283-j70dgf0es5rsao99d5ouhk03jot8fihg.apps.googleusercontent.com\",\r\n        scope: \"profile email\",\r\n      });\r\n\r\n      if (auth2?.isSignedIn.get()) {\r\n        console.log(\"로그인이 이미 된상태\");\r\n        // 원하는 곳으로 redirect\r\n      }\r\n\r\n      // 버튼을 클릭했을때\r\n      // google 로그인 창이 뜨도록 하는 click event 핸들러 설정\r\n      // buttonRef 가 ref로 설정된 컴포넌트(button 등)에\r\n      // 클릭 이벤트를 설정하고\r\n      // 해당하는 컴포넌트를 클릭하면 google 로그인 창이 뜨도록 설정하기\r\n      // google login 창이 popup 되고, id를 선택하여,\r\n      // 정상적으로 로그인이 수행되면\r\n      // 로그인 이후 작동되는 callback 함수를 3번째 매개변수로\r\n      // 설정한다\r\n      // google login 창이 popup 된후 그냥 창을 닫거나\r\n      // 또는 정상적으로 로그인이 수행되지 않았을때 실행되는 함수를\r\n      // 4번째 매개변수로 설정한다\r\n      // 1번째 매개밴수 : 누구를 클릭했을때\r\n      // 2번째 매개변수 : 옵션\r\n      // 3번째 매개변수 : 로그인이 성공했을때 실행할 함수\r\n      // 4번째 매개변수 : 로그인이 실패했을때 실행할 함수\r\n      await auth2.attachClickHandler(\r\n        buttonRef.current,\r\n        {},\r\n        googleResponse,\r\n        (err) => alert(JSON.stringify(err))\r\n      );\r\n    });\r\n  };\r\n  useEffect(googleSDK_init, [googleSDK_init]);\r\n\r\n  const logout = (e) => {\r\n    const auth2 = window.gapi.auth2.getAuthInstance();\r\n    auth2?.disconnect();\r\n    alert(\"LogOut OK!!!\");\r\n  };\r\n\r\n  return (\r\n    <div id=\"buttonWrapper\">\r\n      <div id=\"myGoogleBtn\" ref={buttonRef}>\r\n        <span className=\"icon\"></span>\r\n        <span className=\"buttonText\">Google 로그인</span>\r\n      </div>\r\n      <span className=\"buttonText\" onClick={logout}>\r\n        Google 로그아웃\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoogleButton;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { TodoMain, TodoInput, TodoList } from \"./comps\";\nimport { MyButton, HomeButton, CompButton } from \"./comps\";\nimport { LoginRoute, LoginForm, AuthRoute } from \"./comps\";\nimport { Route } from \"react-router-dom\";\nimport { UserContextProvider } from \"./context\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      {/*  TodoMain.jsx Layout을 사용하여 TODO 화면을 구현   */}\n      <UserContextProvider>\n        <LoginRoute>\n          <Route exact path=\"/login\">\n            <LoginForm />\n          </Route>\n          <Route exact path=\"/\">\n            <AuthRoute>\n              <TodoMain header=\"이번주에 할일\" form={<TodoInput />}>\n                <TodoList />\n              </TodoMain>\n            </AuthRoute>\n          </Route>\n        </LoginRoute>\n      </UserContextProvider>\n\n      <MyButton />\n      <HomeButton />\n      <CompButton onClick={() => alert(\"집에가자\")}>우리집</CompButton>\n      <CompButton>서울로</CompButton>\n      <CompButton>제주로</CompButton>\n      <CompButton>미국으로</CompButton>\n      <CompButton>북극으로</CompButton>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}